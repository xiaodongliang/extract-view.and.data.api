<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>ADN Node.js Server Sample</title>

    <!-- External libraries -->
    <script src="https://code.jquery.com/jquery-2.1.2.js"></script><!-- jquery-2.1.2.min.js -->
    <script src="https://code.jquery.com/ui/1.11.3/jquery-ui.js"></script> <!-- http://jqueryui.com/ -->

    <!-- link type="text/css" rel="stylesheet" href="https://raw.githubusercontent.com/mar10/fancytree/master/dist/skin-win8/ui.fancytree.min.css" / -->
    <link type="text/css" rel="stylesheet" href="/fancytree/skin-win8/ui.fancytree.min.css" />
    <!-- script src="https://raw.githubusercontent.com/mar10/fancytree/master/dist/jquery.fancytree-all.min.js"></script -->
    <script src="/fancytree/jquery.fancytree-all.min.js"></script>

    <!-- Autodesk View & Data API -->
    <link type="text/css" rel="stylesheet" href="https://developer.api.autodesk.com/viewingservice/v1/viewers/style.css" />
	<!-- script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/three.min.js"></script -->
    <script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/viewer3D.min.js"></script>

    <!-- Our scripts -->
    <link rel="stylesheet" type="text/css" href="/style.css" />

    <script>
        var oExtracted =<%= extracted %> ;
        var oDocument =null, oViewer =null ;
        var oViewables =null, oViews3D =null, oViews2D =null ;
        $(document).ready (function () {
            if ( oExtracted ) {
                $('#bubblesImg').attr ('src', '/img/download.png') ;
                $('#bubblesImg').attr ('title', 'Download Viewables') ;
                $('#bubblesA').attr ('href', '/extracted/<%= root %>.zip') ;
            } else {
                //
                $('#bubblesA').click (function (e) {
                    $('#bubblesImg').attr ('src', '/img/extracting.gif') ;
                    $('#bubblesImg').attr ('title', 'Extracting Viewables') ;

                    $.ajax ({
                        url: 'http://' + window.location.host + '/api/results/<%= bucket %>/<%= root %>/project',
                        type: 'get',
                        complete: null
                    }).done (function (results) {
                        var intervalRef =setInterval (function () {
                            $.ajax ({
                                url: 'http://' + window.location.host + '/extracted/<%= root %>.zip',
                                type: 'HEAD',
                                error: function () {
                                    // not yet there
                                },
                                success: function () {
                                    clearInterval (intervalRef) ;
                                    $('#bubblesImg').attr ('src', '/img/download.png') ;
                                    $('#bubblesImg').attr ('title', 'Download Viewables') ;
                                    $('#bubblesA').attr ('href', '/extracted/<%= root %>.zip') ;
                                    oExtracted =true ;
                                }
                            }) ;
                        }, 5000) ;
                    }) ;
                    $('#bubblesA').prop ('onclick', null).off ('click') ;
                }) ;
            }

            var options ={ 'document': '<%= urn %>', 'accessToken': '<%= accessToken %>', 'env': 'AutodeskProduction' } ;
            //oViewer =new Autodesk.Viewing.Viewer3D ($("#viewer") [0], {}) ; // No toolbar
            oViewer =new Autodesk.Viewing.Private.GuiViewer3D ($("#viewer") [0], {}) ; // With toolbar
            oViewer.addEventListener (Autodesk.Viewing.TOOLBAR_CREATED_EVENT, onViewerToolbarCreated) ;
            Autodesk.Viewing.Initializer (options, function () {
                oViewer.initialize () ;
                loadDocument (oViewer, options) ;
            }) ;
        }) ;

        function loadDocument (viewer, options) {
            if ( options.document.substring (0, 4) === 'urn:' )
                options.document =options.document.substring (4) ;

            Autodesk.Viewing.Document.load ('urn:' + options.document, //options.accessToken,
                function (doc) { // onLoadCallback
                    oDocument =doc ;
                    // Get all the 3D and 2D views (but keep in separate arrays so we can differentiate in the UI)
                    oViews3D =Autodesk.Viewing.Document.getSubItemsWithProperties (doc.getRootItem (), { 'type': 'geometry', 'role': '3d' }, true) ;
                    oViews2D =Autodesk.Viewing.Document.getSubItemsWithProperties (doc.getRootItem (), { 'type': 'geometry', 'role': '2d' }, true) ;

                    // Load up first a 3D view by default
                    if ( oViews3D.length > 0 )
                        oViewer.load (doc.getViewablePath (oViews3D [0])) ;
                    else if ( oViews2D.length > 0 )
                        oViewer.load (doc.getViewablePath (oViews2D [0])) ;
                    else
                        return (alert ('ERROR: No 3D or 2D views found in this document!')) ;

                    var root ={ 'title': doc.myData.children [0].name, 'key': doc.myData.guid, 'folder': true, 'children': [] } ;
                    root.children =loopDoc (doc.myData) ;
                    $('#doctree').fancytree ({
                        //imagePath: 'img/',
                        source: [ root.children [0] ],
                        checkbox: false,
                        click: fancyTreeClick
                    }) ;

                    $.ajax ({
                        url: '/api/results/<%= bucket %>/<%= root %>',
                        type: 'get',
                        complete: null
                    }).done (function (response) {
                        oViewables =response ;
                        var root ={ 'title': response.children [0].name, 'key': response.guid, 'folder': true, 'children': [] } ;
                        root.children =loopDoc (response) ;
                        $('#fulltree').fancytree ({
                            //imagePath: 'img/',
                            source: [ root.children [0] ],
                            checkbox: false,
                            click: fancyTreeClick
                        }) ;
                        $('#fulltree').fancytree ('getTree').visit (function (node){
                            node.setExpanded (true) ;
                        }) ;
                    }).fail (function (xhr, ajaxOptions, thrownError) {
                        alert ('Failed to get server data!') ;
                    }) ;
                },
                function (errorMsg) { // onErrorCallback
                    alert("Load Error: " + errorMsg) ;
                }
            ) ;
        }

        function loopDoc (doc) {
            var data =[] ;
            $.each (doc.children, function (key, value) {
                var folder =(value.children !== undefined && value.children.length > 0) ;
                var node ={ 'title': getName (value), 'key': value.guid, 'folder': folder, 'role': value.role } ; //'extraClasses': 'viewableIcon'
                if ( (value.role == '3d' || value.role == '2d') && value.type == 'geometry' )
                    node.data ={ icon: '/img/view.png'/*, isLocked: true*/ } ;
                if ( folder == true )
                    node.children =loopDoc (value) ;
                data.push (node) ;
            }) ;
            return (data) ;
        }

        function getName (value) {
            if ( value.name !== undefined )
                return (value.name) ;
            else if ( value.role !== undefined && value.urn !== undefined )
                return (value.urn.split ('/').pop ()) ;
            return ('?') ;
        }

        function fancyTreeClick (event, data) {
            if ( data.targetType == 'expander' )
                return ;
            var node =data.node ; // key title
            if ( node.data.role != '3d' && node.data.role != '2d' )
                return ;
            var viewObj =Autodesk.Viewing.Document.getSubItemsWithProperties (oDocument.getRootItem (), { 'type': 'geometry', 'role': node.data.role, 'guid': node.key }, true) ;
            if ( viewObj.length == 0 )
                return ;
            var path =oDocument.getViewablePath (viewObj [0]) ;
            oViewer.load (path, oDocument.getPropertyDbPath ()) ;
        }

        function onViewerToolbarCreated () {
            createButtonInNewControlGroup (
                    'extractIO.DangerZone', 'extractIO.Delete',
                    'url(/img/delete.24x24.png)', 'DANGER ZONE - Delete this project',
                    function (evt) {
                        evt.stopPropagation () ;
                        if ( confirm ('Are you sure you want to delete that project?') ) {
                            $.ajax ({
                                url: 'http://' + window.location.host + '/api/results/<%= bucket %>/<%= root %>',
                                type: 'delete',
                                complete: null
                            }).done (function (results) {
                                window.close () ;
                            }) ;
                        }
                    }
            ) ;
        }

        function createButton (id, imgUrl, tooltip, handler) {
            var button =new Autodesk.Viewing.UI.Button (id) ;
            button.icon.style.backgroundImage =imgUrl ;
            button.setToolTip (tooltip) ;
            button.onClick =handler ;
            return (button) ;
        }

        function createButtonInNewControlGroup (groupName, id, img, tooltip, handler) {
            var viewerToolbar =oViewer.getToolbar (true) ;
            var ctrlGroup =new Autodesk.Viewing.UI.ControlGroup (groupName) ;
            var button =createButton (id, img, tooltip, handler) ;
            ctrlGroup.addControl (button) ;
            viewerToolbar.addControl (ctrlGroup) ;
            return ({ 'group': ctrlGroup, 'button': button }) ;
        }

        function createButtonInExistingControlGroup (ctrlGroup, id, img, tooltip, handler, index) {
            var viewerToolbar =oViewer.getToolbar (true) ;
            var modelTools =viewerToolbar.getControl (ctrlGroup) ;
            var button =createButton (id, img, tooltip, handler) ;
            modelTools.addControl (button, { 'index': (index || 1) }) ;
            return (button) ;
        }
    </script>
</head>

<body>
    <div id="header_wrap" class="outer">
        <header class="inner">
            <a id="forkme_banner" href="https://github.com/cyrillef/workflow-node.js-server-view.and.data.api">View sources on GitHub</a>

            <h1 id="project_title">Developer Autodesk </h1>
            <h2 id="project_tagline">Large Model Viewer - View & Data API </h2>

        </header>
    </div>

    <div id="project">

        <br />
        <h3>LMV Extractor Node.js Sample</h3>
        <div id="viewer"></div>
        <br />

        <hr />
        <h3>Note</h3>
        <div>You can switch views by clicking on items with the following icon <img src="/img/view.png" width="16"/></div>
        <br />

        <hr />
        <h3>Document Data</h3>
        <div id="doctree"></div>
        <br />

        <hr />
        <div>
            <div class="left"><h3>Full Viewable Data</h3></div>
            <div class="right"><a id="bubblesA" href="javascript:void(0)"><img id="bubblesImg" src="/img/extract.png" title="Extract Viewables" /></a></div>
            <div class="clear"></div>
        </div>
        <div id="fulltree"></div>
        <br />

        <hr />
        <h3>Instructions to view files locally</h3>
        <div>Once you downloaded the 'bubbles' files using the <img src="/img/download.png" width="16" /> button above:
            <ul style="list-style: lower-roman; padding-left: 30px;">
                <li>unzip that file in a folder</li>
                <li>download and unzip the '<a href="/adsk-viewer.zip">Autodesk viewer engine</a>' in the same folder</li>
                <li>setup Node.js or the http Python server following the <a href="https://github.com/cyrillef/workflow-node.js-server-view.and.data.api">instructions on the GitHub repository</a></li>
                <li>execute any .bat file located in your folder - usually '0.svf.html.bat'</li>
            </ul>
        </div>


        <br />

    </div>



</body>
</html>